from flask import Flask, render_template, Response, request, jsonify
import cv2
import numpy as np
import face_recognition
import os
import time
import geocoder
import logging
from email.message import EmailMessage
import smtplib
from playsound import playsound
import threading
from werkzeug.utils import secure_filename

app = Flask(__name__)

# Configuration
app.config['UPLOAD_FOLDER'] = os.path.join('static', 'target_images')
app.config['ALLOWED_EXTENSIONS'] = {'jpg', 'jpeg', 'png'}
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max

# Ensure upload directory exists
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# Logging
logging.basicConfig(level=logging.INFO)

# Load model
prototxt_path = "MobileNetSSD_deploy.prototxt"
caffemodel_path = "MobileNetSSD_deploy.caffemodel"
net = cv2.dnn.readNetFromCaffe(prototxt_path, caffemodel_path)

OBJECT_CLASSES = ["background", "aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow",
                  "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor", "knife", "gun"]
WEAPON_CLASSES = ["knife", "gun"]

# Email configuration
sender_email = "spiderabhay4321@gmail.com"
sender_password = "abcl cfhs giwm elvj"
recipient_email = "antiterroristgrop@gmail.com"

def load_known_faces():
    path = app.config['UPLOAD_FOLDER']
    valid_extensions = tuple('.' + ext for ext in app.config['ALLOWED_EXTENSIONS'])
    images, classNames = [], []
    
    for file in os.listdir(path):
        if file.lower().endswith(valid_extensions):
            img_path = os.path.join(path, file)
            img = cv2.imread(img_path)
            if img is not None:
                images.append(img)
                classNames.append(os.path.splitext(file)[0])
    return images, classNames

images, classNames = load_known_faces()

def findEncodings(images):
    encodeList = []
    for img in images:
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        enc = face_recognition.face_encodings(img)
        if enc:
            encodeList.append(enc[0])
    return encodeList

encodeListKnown = findEncodings(images)

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

def get_location():
    g = geocoder.ip('me')
    return g.latlng if g.latlng else (None, None)

def sendEmail(subject, body, image_path):
    msg = EmailMessage()
    msg['From'] = sender_email
    msg['To'] = recipient_email
    msg['Subject'] = subject
    msg.set_content(body)

    with open(image_path, 'rb') as f:
        msg.add_attachment(f.read(), maintype='image', subtype='jpeg', filename=os.path.basename(image_path))

    with smtplib.SMTP('smtp.gmail.com', 587) as server:
        server.starttls()
        server.login(sender_email, sender_password)
        server.send_message(msg)

# Detection Logic
last_alert_times, last_weapon_alert_time = {}, 0
cooldown_seconds = 30
cap = cv2.VideoCapture(0)

def gen_frames():
    global last_alert_times, last_weapon_alert_time, encodeListKnown, classNames

    while True:
        success, frame = cap.read()
        if not success:
            break

        current_time = time.time()

        # Weapon detection
        blob = cv2.dnn.blobFromImage(frame, 0.007843, (300, 300), 127.5)
        net.setInput(blob)
        detections = net.forward()

        for i in range(detections.shape[2]):
            confidence = detections[0, 0, i, 2]
            if confidence > 0.5:
                class_id = int(detections[0, 0, i, 1])
                object_name = OBJECT_CLASSES[class_id]

                box = detections[0, 0, i, 3:7] * np.array([*frame.shape[1::-1], *frame.shape[1::-1]])
                x1, y1, x2, y2 = box.astype("int")

                if object_name in WEAPON_CLASSES:
                    cv2.putText(frame, f"WARNING: {object_name.upper()}", (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 0, 255), 2)
                    cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 0, 255), 2)

                    if current_time - last_weapon_alert_time >= cooldown_seconds:
                        last_weapon_alert_time = current_time
                        detected_image = "detected_weapon.jpg"
                        cv2.imwrite(detected_image, frame)
                        threading.Thread(target=playsound, args=("alert.mp3",)).start()
                        sendEmail("Weapon Detected", f"{object_name.upper()} detected!", detected_image)
                else:
                    cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)

        # Face detection
        imgS = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
        imgS = cv2.cvtColor(imgS, cv2.COLOR_BGR2RGB)
        facesCurFrame = face_recognition.face_locations(imgS)
        encodesCurFrame = face_recognition.face_encodings(imgS, facesCurFrame)

        for encodeFace, faceLoc in zip(encodesCurFrame, facesCurFrame):
            matches = face_recognition.compare_faces(encodeListKnown, encodeFace)
            faceDis = face_recognition.face_distance(encodeListKnown, encodeFace)
            matchIndex = np.argmin(faceDis)

            if matches[matchIndex]:
                name = classNames[matchIndex].upper()
                if current_time - last_alert_times.get(name, 0) >= cooldown_seconds:
                    last_alert_times[name] = current_time
                    y1, x2, y2, x1 = [v * 4 for v in faceLoc]
                    cv2.rectangle(frame, (x1, y1), (x2, y2), (255, 0, 0), 2)
                    cv2.putText(frame, name, (x1 + 6, y2 - 6), cv2.FONT_HERSHEY_DUPLEX, 0.8, (255, 255, 255), 1)

                    detected_image = f"detected_{name}.jpg"
                    cv2.imwrite(detected_image, frame)
                    lat, lng = get_location()
                    loc_msg = f"https://maps.google.com/?q={lat},{lng}" if lat else "Location not available"
                    body = f"Terrorist {name} detected!\nLocation: {loc_msg}"
                    threading.Thread(target=playsound, args=("alert.mp3",)).start()
                    sendEmail("Terrorist Detected", body, detected_image)

        ret, buffer = cv2.imencode('.jpg', frame)
        frame = buffer.tobytes()
        yield (b'--frame\r\nContent-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')

@app.route('/')
def index():
    global classNames
    images, classNames = load_known_faces()
    return render_template('index.html', terrorists=classNames)

@app.route('/video_feed')
def video_feed():
    return Response(gen_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/add_target', methods=['POST'])
def add_target():
    try:
        if 'image' not in request.files:
            return jsonify({'success': False, 'error': 'No image file provided'}), 400

        file = request.files['image']
        if file.filename == '':
            return jsonify({'success': False, 'error': 'No selected file'}), 400

        name = request.form.get('name', '').strip()
        if not name:
            return jsonify({'success': False, 'error': 'No name provided'}), 400

        if not file or not allowed_file(file.filename):
            return jsonify({'success': False, 'error': 'Invalid file type. Only JPG, JPEG, PNG allowed.'}), 400

        # Temporarily save to memory
        file_bytes = np.frombuffer(file.read(), np.uint8)
        img_np = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)

        if img_np is None:
            return jsonify({'success': False, 'error': 'Invalid image content'}), 400

        rgb_img = cv2.cvtColor(img_np, cv2.COLOR_BGR2RGB)
        encodings = face_recognition.face_encodings(rgb_img)

        if not encodings:
            return jsonify({'success': False, 'error': 'No face detected in image'}), 400

        # Save file permanently
        clean_name = secure_filename(name)
        filename = f"{clean_name}.jpg"
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)

        if os.path.exists(filepath):
            return jsonify({'success': False, 'error': 'Target with this name already exists'}), 400

        cv2.imwrite(filepath, img_np)

        # Reload known faces
        global images, classNames, encodeListKnown
        images, classNames = load_known_faces()
        encodeListKnown = findEncodings(images)

        return jsonify({
            'success': True,
            'name': clean_name,
            'image_url': f"/static/target_images/{filename}"
        })

    except Exception as e:
        logging.error(f"Error in add_target: {str(e)}")
        return jsonify({'success': False, 'error': 'Internal server error'}), 500

        

@app.route('/delete_target', methods=['POST'])
def delete_target():
    try:
        data = request.get_json()
        if not data or 'name' not in data:
            return jsonify({'success': False, 'error': 'Invalid request'}), 400
        
        name = data['name'].strip()
        if not name:
            return jsonify({'success': False, 'error': 'No name provided'}), 400
        
        # Construct file path
        filename = f"{secure_filename(name)}.jpg"
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        
        # Check if file exists
        if not os.path.exists(filepath):
            return jsonify({'success': False, 'error': 'Target not found'}), 404
        
        # Delete the file
        os.remove(filepath)
        
        # Reload known faces
        global images, classNames, encodeListKnown
        images, classNames = load_known_faces()
        encodeListKnown = findEncodings(images)
        
        return jsonify({'success': True})
    
    except Exception as e:
        logging.error(f"Error in delete_target: {str(e)}")
        return jsonify({'success': False, 'error': 'Internal server error'}), 500

if __name__ == '__main__':
    app.run(debug=True)